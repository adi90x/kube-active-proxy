stages:
  - build
  - push
  - deploy

variables:
  CONTAINER_IMAGE: $CI_REGISTRY_IMAGE
  DOCKER_DRIVER: overlay2
  DOCKER_CLI_EXPERIMENTAL: enabled
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
default:
  retry: 2
  image: registry.gitlab.com/adi90x/docker-buildx-qemu
  services:
    - docker:dind
  before_script:
    - if [[ $CI_BUILD_REF_NAME == "master" ]]; then tag="latest"; else tag=$CI_BUILD_REF_NAME; fi
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    # Use docker-container driver to allow useful features (push/multi-platform)
    - docker run --privileged --rm registry.gitlab.com/adi90x/multiarch --install all
    - docker context create tls-context
    - docker buildx create --driver docker-container --use tls-context
    - kap_version=`echo "$(echo $CI_COMMIT_REF_NAME)"@"$(echo $CI_COMMIT_SHA | cut -c -7)"`
    - version_available=$(curl --write-out %{http_code} --silent --output /dev/null https://gitlab.com/adi90x/kube-template-kap/builds/artifacts/$CI_BUILD_REF_NAME/browse?job=compile-go)
    - if [[ $version_available == "302" ]]; then build_version=artifacts/$CI_BUILD_REF_NAME; else build_version="artifacts/master"; fi
    - if [[ $FORCE_KUBE_GEN_VERSION != "" ]]; then build_version=$FORCE_KUBE_GEN_VERSION/artifacts; fi
    #- docker buildx inspect --bootstrap # Not need only for debug
    #- update-binfmts --enable # Important: Ensures execution of other binary formats is enabled in the kernel => Move to host setup
    # Set USE_CACHE=--no-cache if need to force rebuild

build-amd64:
  stage: build
  script:
    - docker buildx build $USE_CACHE --compress --progress plain --platform linux/amd64 --build-arg VERSION_KUBE_GEN=$build_version --build-arg KAP_VERSION=$kap_version --cache-from type=registry,ref=$CI_REGISTRY_IMAGE/cache/amd64:$tag --cache-to type=registry,ref=$CI_REGISTRY_IMAGE/cache/amd64:$tag,mode=max --pull --tag $CI_REGISTRY_IMAGE/amd64:$tag --push .

build-arm64:
  stage: build
  script:
    - docker buildx build $USE_CACHE --compress --progress plain --platform linux/arm64 --build-arg VERSION_KUBE_GEN=$build_version --build-arg KAP_VERSION=$kap_version --cache-from type=registry,ref=$CI_REGISTRY_IMAGE/cache/arm64:$tag --cache-to type=registry,ref=$CI_REGISTRY_IMAGE/cache/arm64:$tag,mode=max --pull --tag $CI_REGISTRY_IMAGE/arm64:$tag --push .

push-image:
  stage: push
  before_script:
    - if [[ $CI_BUILD_REF_NAME == "master" ]]; then tag="latest"; else tag=$CI_BUILD_REF_NAME; fi
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker manifest create $CI_REGISTRY_IMAGE:$tag --amend $CI_REGISTRY_IMAGE/arm64:$tag --amend $CI_REGISTRY_IMAGE/amd64:$tag
    - docker manifest push $CI_REGISTRY_IMAGE:$tag 

deploy-k3s:
  stage: deploy
  before_script:
  script:
    - mkdir -p ~/.kube/ && echo $KUBE_CONFIG_64 | base64 -d > ~/.kube/config
    - kubectl -n default rollout restart deploy/kube-active-proxy
